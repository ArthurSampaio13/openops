name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lookup node_modules cache
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-cache-${{ hashFiles('package-lock.json', '.npmrc') }}
          lookup-only: true
          save-always: true
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci --no-audit --no-fund
  lint:
    name: Lint
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore node_modules cache
        id: node-modules-cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: node-modules-cache-${{ hashFiles('package-lock.json', '.npmrc') }}
      - name: Restore NX cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-lint-${{ github.sha }}
          restore-keys: nx-lint-
      - name: Lint
        if: steps.nx-lint-cache.outputs.cache-hit != 'true'
        env:
          NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
        run: |
          npx nx run-many --target=lint --quiet
      - name: Truncate NX cache
        run: ./tools/truncate-nx-cache.sh
  check-licenses:
    name: Check Licenses
    needs: install
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Restore node_modules cache
        id: node-modules-cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: node-modules-cache-${{ hashFiles('package-lock.json', '.npmrc') }}
          fail-on-cache-miss: true
      - name: Check licenses
        run: |
          npm run license-check
          if ! git diff --exit-code THIRD_PARTY_LICENSES.txt; then
            echo "Please update THIRD_PARTY_LICENSES.txt by running 'npm run license-check'" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      - name: Commit changes for dependabot
        if: failure() && startsWith(github.head_ref, 'dependabot/')
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Update THIRD_PARTY_LICENSES.txt
  test:
    strategy:
        matrix:
            test-suits:
              - name: UI
                include: ui-*,*-ui
              - name: Blocks
                include: blocks-*
              - name: Server API
                key: server-api
                include: server-api
              - name: Engine and Libraries
                key: others
                exclude: ui-*,*-ui,blocks-*,server-api
    name: Test ${{ matrix.test-suits.name }}
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore node_modules cache
        id: node-modules-cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: node-modules-cache-${{ hashFiles('package-lock.json', '.npmrc') }}
      - name: Restore NX cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-test-${{ matrix.test-suits.key || matrix.test-suits.name }}-${{ github.sha }}
          restore-keys: nx-test-${{ matrix.test-suits.key || matrix.test-suits.name }}-
          save-always: true
      - name: Test
        if: steps.nx-test-cache.outputs.cache-hit != 'true'
        continue-on-error: false
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: error
          command: npx nx run-many --target test --projects "${{ matrix.test-suits.include }}" --exclude "${{ matrix.test-suits.exclude }}" --quiet
        env:
          NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
      - name: Truncate NX cache
        run: ./tools/truncate-nx-cache.sh
  build:
    name: Build Project
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore node_modules cache
        id: node-modules-cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: node-modules-cache-${{ hashFiles('package-lock.json', '.npmrc') }}
      - name: Restore NX cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-build-${{ github.sha }}
          restore-keys: nx-build-
      - name: Build project
        env:
          NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
        run: |
          npm run prepare
          npx nx run-many --target=build
          ./tools/truncate-nx-cache.sh
      - name: Save build cache
        uses: actions/cache/save@v4
        with:
          path: dist
          key: dist-${{ github.sha }}
  build-images-amd64:
    strategy:
      matrix:
        target:
        - name: App
          file: Dockerfile
          repository: openops-app
        - name: Engine
          file: engine.Dockerfile
          repository: openops-engine
    name: Build ${{ matrix.target.name }} Image (amd64)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: dist-${{ github.sha }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials
        if: vars.ECR_REGION
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.ECR_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        if: vars.ECR_REGION
        uses: aws-actions/amazon-ecr-login@v2
      - name: Format image tag parts
        env:
          BRANCH: ${{ github.ref_name }}
          SHA: ${{ github.event.pull_request.head.sha || github.sha }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo SANITIZED_BRANCH=${BRANCH//[\/.:_]/-} >> "$GITHUB_ENV"
          echo REPOSITORY_URI=${REGISTRY}/openops/${{ matrix.target.repository }} >> "$GITHUB_ENV"
          echo SHORT_SHA=${SHA::8} >> "$GITHUB_ENV"
      - name: Build image
        if: vars.ECR_REGION
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.target.file }}
          build-args: VERSION=${{ env.SHORT_SHA }}
          platforms: linux/amd64
          provenance: false
          push: true
          tags: |
            ${{ env.REPOSITORY_URI }}:${{ env.SHORT_SHA }}-amd64
            ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-${{ env.SHORT_SHA }}-amd64
            ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-amd64
          cache-from: |
            type=registry,ref=${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-amd64-cache
            type=registry,ref=${{ env.REPOSITORY_URI }}:main-amd64-cache
          cache-to: mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-amd64-cache
      - name: Push lambda-compatible tags for engine
        if: vars.ECR_REGION && matrix.target.name == 'Engine'
        env:
          SHA_TAG: ${{ env.REPOSITORY_URI }}:${{ env.SHORT_SHA }}-amd64
          BRANCH_TAG: ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-amd64
        run: |
          docker tag $SHA_TAG ${SHA_TAG}-lambda && docker push ${SHA_TAG}-lambda
          docker tag $BRANCH_TAG ${BRANCH_TAG}-lambda && docker push ${BRANCH_TAG}-lambda
      - name: Build image
        if: ${{ !vars.ECR_REGION }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.target.file }}
          build-args: VERSION=${{ env.SHORT_SHA }}
          provenance: false
          platforms: linux/amd64
          cache-from: type=gha,scope=${{ matrix.target.name }}-amd64
          cache-to: type=gha,mode=max,scope=${{ matrix.target.name }}-amd64

  build-images-arm64:
    strategy:
      matrix:
        target:
        - name: App
          file: Dockerfile
          repository: openops-app
        - name: Engine
          file: engine.Dockerfile
          repository: openops-engine
    name: Build ${{ matrix.target.name }} Image (arm64)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: dist-${{ github.sha }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials
        if: vars.ECR_REGION
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.ECR_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        if: vars.ECR_REGION
        uses: aws-actions/amazon-ecr-login@v2
      - name: Format image tag parts
        env:
          BRANCH: ${{ github.ref_name }}
          SHA: ${{ github.event.pull_request.head.sha || github.sha }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo SANITIZED_BRANCH=${BRANCH//[\/.:_]/-} >> "$GITHUB_ENV"
          echo REPOSITORY_URI=${REGISTRY}/openops/${{ matrix.target.repository }} >> "$GITHUB_ENV"
          echo SHORT_SHA=${SHA::8} >> "$GITHUB_ENV"
      - name: Build image
        if: vars.ECR_REGION
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.target.file }}
          build-args: VERSION=${{ env.SHORT_SHA }}
          platforms: linux/arm64
          provenance: false
          push: true
          tags: |
            ${{ env.REPOSITORY_URI }}:${{ env.SHORT_SHA }}-arm64
            ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-${{ env.SHORT_SHA }}-arm64
            ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-arm64
          cache-from: |
            type=registry,ref=${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-arm64-cache
            type=registry,ref=${{ env.REPOSITORY_URI }}:main-arm64-cache
          cache-to: mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-arm64-cache
      - name: Build image
        if: ${{ !vars.ECR_REGION }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.target.file }}
          build-args: VERSION=${{ env.SHORT_SHA }}
          provenance: false
          platforms: linux/arm64
          cache-from: type=gha,scope=${{ matrix.target.name }}-arm64
          cache-to: type=gha,mode=max,scope=${{ matrix.target.name }}-arm64
  create-multiarch-manifest:
    strategy:
      matrix:
        target:
        - name: App
          repository: openops-app
        - name: Engine
          repository: openops-engine
    name: Create Multi-arch Manifest for ${{ matrix.target.name }}
    needs: [build-images-amd64, build-images-arm64]
    runs-on: ubuntu-latest
    if: vars.ECR_REGION
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.ECR_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Format image tag parts
        env:
          BRANCH: ${{ github.ref_name }}
          SHA: ${{ github.event.pull_request.head.sha || github.sha }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo SANITIZED_BRANCH=${BRANCH//[\/.:_]/-} >> "$GITHUB_ENV"
          echo REPOSITORY_URI=${REGISTRY}/openops/${{ matrix.target.repository }} >> "$GITHUB_ENV"
          echo SHORT_SHA=${SHA::8} >> "$GITHUB_ENV"
      - name: Create and push multi-arch manifest
        run: |
          # Create and push SHA manifest
          docker manifest create ${{ env.REPOSITORY_URI }}:${{ env.SHORT_SHA }} \
            ${{ env.REPOSITORY_URI }}:${{ env.SHORT_SHA }}-amd64 \
            ${{ env.REPOSITORY_URI }}:${{ env.SHORT_SHA }}-arm64
          docker manifest push ${{ env.REPOSITORY_URI }}:${{ env.SHORT_SHA }}
          
          # Create and push branch-SHA manifest
          docker manifest create ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-${{ env.SHORT_SHA }} \
            ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-${{ env.SHORT_SHA }}-amd64 \
            ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-${{ env.SHORT_SHA }}-arm64
          docker manifest push ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-${{ env.SHORT_SHA }}
          
          # Create and push branch manifest
          docker manifest create ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }} \
            ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-amd64 \
            ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}-arm64
          docker manifest push ${{ env.REPOSITORY_URI }}:${{ env.SANITIZED_BRANCH }}
